# -*- coding: utf-8 -*-
"""google_stocks_prediction_GRU_RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vIKd8crcYKSvP7sm8c8WwmGR4Rr1NVtn
"""

gsheet_url="https://docs.google.com/spreadsheets/d/1Sqf4OdzWkm_BkfnSw2YAMF_J7vEApKu3uJosyqNgPrE/edit#gid=0"

url_1 = gsheet_url.replace('/edit#gid=', '/export?format=csv&gid=')

import pandas as pd

"""Reading Data"""

df = pd.read_csv(url_1,index_col='Date',parse_dates= ['Date'])

df.tail()

df.shape

"""Taking High values for predition

"""

data = df['High'].values
data = data.reshape(-1,1)

"""Transforming using minmax scaler"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

data = scaler.fit_transform(data)

import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

df['High'][:'2021'].plot(figsize = (12,3),legend=True)
df['High']['2021':].plot(figsize = (12,3),legend=True)
plt.legend(['Train_data','Test_data'])
plt.title('Google Stocks Price')
plt.show()

train_data = data[:1316]
test_data  = data[1316:]

test_data.shape

"""Creating x_train as 60days of data in series used to predict the 61st day(Just we took 60days as buffer)"""

x_train = []
y_train = []

for i in range(60,train_data.shape[0]):
  x_train.append(train_data[i-60:i])
  y_train.append(train_data[i])

x_train = np.array(x_train)
y_train = np.array(y_train)

x_train[0][-1]

y_train[0]

x_train.shape,y_train.shape

import tensorflow

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,LSTM,SimpleRNN,GRU

"""Model creation using RNN and GRU"""

model = Sequential()
model.add(SimpleRNN(60, input_shape = (x_train.shape[1],1),activation='tanh',return_sequences=True))
model.add(Dropout(rate = 0.2))
model.add(GRU(60,activation='tanh'))
model.add(Dropout(rate = 0.2))
model.add(Dense(units =1))

model.compile(optimizer= 'adam',loss = 'mean_squared_error',metrics = 'accuracy')

model.fit(x_train,y_train,epochs = 100,batch_size=100,validation_split= 0.2)

test_data = data[:120]

x_test = []
y_test = []

for i in range(60,test_data.shape[0]):
  x_test.append(test_data[i-60:i])
  y_test.append(test_data[i])

x_test = np.array(x_test)
y_test = np.array(y_test)

x_test[0][-1],y_test[0]

x_test.shape,y_test.shape

y_test_inv = scaler.inverse_transform(y_test)

y_pred = model.predict(x_test)

"""Inversing the data from Minmax scaler"""

y_pred_inv = scaler.inverse_transform(y_pred)

"""Testing the model"""

plt.figure(figsize=(12,3))
plt.plot(y_test_inv, label = 'Y-Actual')
plt.plot(y_pred_inv, label = 'Y-Predicted')
plt.title('Actual Vs Predicted')
plt.legend()
plt.show()